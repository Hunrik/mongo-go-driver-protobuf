// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: codecs_test.proto

package test

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Data struct {
	BoolValue            *types.BoolValue   `protobuf:"bytes,1,opt,name=boolValue,proto3" json:"boolValue,omitempty"`
	BytesValue           *types.BytesValue  `protobuf:"bytes,2,opt,name=bytesValue,proto3" json:"bytesValue,omitempty"`
	DoubleValue          *types.DoubleValue `protobuf:"bytes,3,opt,name=doubleValue,proto3" json:"doubleValue,omitempty"`
	FloatValue           *types.FloatValue  `protobuf:"bytes,4,opt,name=floatValue,proto3" json:"floatValue,omitempty"`
	Int32Value           *types.Int32Value  `protobuf:"bytes,5,opt,name=int32Value,proto3" json:"int32Value,omitempty"`
	Int64Value           *types.Int64Value  `protobuf:"bytes,6,opt,name=int64Value,proto3" json:"int64Value,omitempty"`
	StringValue          *types.StringValue `protobuf:"bytes,7,opt,name=stringValue,proto3" json:"stringValue,omitempty"`
	Uint32Value          *types.UInt32Value `protobuf:"bytes,8,opt,name=uint32Value,proto3" json:"uint32Value,omitempty"`
	Uint64Value          *types.UInt64Value `protobuf:"bytes,9,opt,name=uint64Value,proto3" json:"uint64Value,omitempty"`
	Timestamp            *types.Timestamp   `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	StructValue          *types.Struct      `protobuf:"bytes,12,opt,name=structValue,proto3" json:"structValue,omitempty"`
	EmptyStructValue     *types.Struct      `protobuf:"bytes,14,opt,name=emptyStructValue,proto3" json:"emptyStructValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2b3e361c7bc6717, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetBoolValue() *types.BoolValue {
	if m != nil {
		return m.BoolValue
	}
	return nil
}

func (m *Data) GetBytesValue() *types.BytesValue {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func (m *Data) GetDoubleValue() *types.DoubleValue {
	if m != nil {
		return m.DoubleValue
	}
	return nil
}

func (m *Data) GetFloatValue() *types.FloatValue {
	if m != nil {
		return m.FloatValue
	}
	return nil
}

func (m *Data) GetInt32Value() *types.Int32Value {
	if m != nil {
		return m.Int32Value
	}
	return nil
}

func (m *Data) GetInt64Value() *types.Int64Value {
	if m != nil {
		return m.Int64Value
	}
	return nil
}

func (m *Data) GetStringValue() *types.StringValue {
	if m != nil {
		return m.StringValue
	}
	return nil
}

func (m *Data) GetUint32Value() *types.UInt32Value {
	if m != nil {
		return m.Uint32Value
	}
	return nil
}

func (m *Data) GetUint64Value() *types.UInt64Value {
	if m != nil {
		return m.Uint64Value
	}
	return nil
}

func (m *Data) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Data) GetStructValue() *types.Struct {
	if m != nil {
		return m.StructValue
	}
	return nil
}

func (m *Data) GetEmptyStructValue() *types.Struct {
	if m != nil {
		return m.EmptyStructValue
	}
	return nil
}

func init() {
	proto.RegisterType((*Data)(nil), "test.Data")
}

func init() { proto.RegisterFile("codecs_test.proto", fileDescriptor_b2b3e361c7bc6717) }

var fileDescriptor_b2b3e361c7bc6717 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd2, 0xc1, 0x4a, 0x02, 0x41,
	0x18, 0xc0, 0xf1, 0xb6, 0xd4, 0x72, 0x8c, 0xb0, 0xbd, 0x24, 0x26, 0x5b, 0x74, 0xea, 0xb4, 0x82,
	0x46, 0x14, 0x41, 0x07, 0x93, 0xa0, 0xeb, 0x58, 0x5d, 0x63, 0x77, 0x1d, 0x45, 0x58, 0x9d, 0x65,
	0xe7, 0x1b, 0xc2, 0x37, 0xe9, 0x91, 0x3a, 0xf6, 0x08, 0x61, 0xf7, 0x9e, 0x21, 0x76, 0x66, 0x67,
	0xf7, 0x43, 0x1b, 0x6f, 0xe2, 0xfc, 0x7f, 0xcc, 0xf7, 0xb1, 0x43, 0x8e, 0x23, 0x3e, 0x66, 0x91,
	0x78, 0x03, 0x26, 0xc0, 0x4f, 0x52, 0x0e, 0xdc, 0xad, 0x64, 0xbf, 0xdb, 0x67, 0x53, 0xce, 0xa7,
	0x31, 0xeb, 0xaa, 0xff, 0x42, 0x39, 0xe9, 0xc2, 0x6c, 0xce, 0x04, 0x04, 0xf3, 0x44, 0x67, 0x6d,
	0x6f, 0x3d, 0x78, 0x4f, 0x83, 0x24, 0x61, 0xa9, 0xc8, 0xcf, 0x3b, 0xeb, 0xe7, 0x02, 0x52, 0x19,
	0xe5, 0x97, 0x5c, 0xfc, 0x56, 0x49, 0x65, 0x18, 0x40, 0xe0, 0xde, 0x90, 0x7a, 0xc8, 0x79, 0xfc,
	0x1a, 0xc4, 0x92, 0xb5, 0x9c, 0x73, 0xe7, 0xb2, 0xd1, 0x6b, 0xfb, 0x9a, 0xfa, 0x86, 0xfa, 0x03,
	0x53, 0xd0, 0x32, 0x76, 0xef, 0x08, 0x09, 0x97, 0xc0, 0x84, 0xa6, 0xbb, 0x8a, 0x9e, 0x6e, 0xd2,
	0x22, 0xa1, 0x28, 0x77, 0xef, 0x49, 0x63, 0xcc, 0x65, 0x18, 0x33, 0xad, 0xf7, 0x94, 0xee, 0x6c,
	0xe8, 0x61, 0xd9, 0x50, 0x0c, 0xb2, 0xcb, 0x27, 0x31, 0x0f, 0x40, 0xf3, 0x8a, 0xe5, 0xf2, 0xc7,
	0x22, 0xa1, 0x28, 0xcf, 0xf0, 0x6c, 0x01, 0xfd, 0x9e, 0xc6, 0x55, 0x0b, 0x7e, 0x2a, 0x12, 0x8a,
	0xf2, 0x1c, 0x5f, 0x5f, 0x69, 0x5c, 0xb3, 0xe3, 0x3c, 0xa1, 0x28, 0xcf, 0xd6, 0x16, 0x90, 0xce,
	0x16, 0x53, 0xad, 0xf7, 0x2d, 0x6b, 0x8f, 0xca, 0x86, 0x62, 0x90, 0x79, 0x89, 0x46, 0x3f, 0xb0,
	0xf8, 0x17, 0x34, 0x3b, 0x06, 0xc6, 0x9b, 0xe9, 0xeb, 0x5b, 0xbc, 0x19, 0x1f, 0x83, 0xec, 0xb5,
	0x14, 0xef, 0xb0, 0x45, 0x2c, 0xaf, 0xe5, 0xd9, 0x14, 0xb4, 0x8c, 0xdd, 0x5b, 0xb5, 0xb9, 0x8c,
	0xf2, 0x2f, 0x76, 0xa8, 0xec, 0xc9, 0x7f, 0x9b, 0xcb, 0x08, 0x28, 0x6e, 0xdd, 0x07, 0xd2, 0x64,
	0xf3, 0x04, 0x96, 0x23, 0xe4, 0x8f, 0xb6, 0xfb, 0x0d, 0x30, 0x68, 0x7e, 0xae, 0x3c, 0xe7, 0x6b,
	0xe5, 0x39, 0xdf, 0x2b, 0xcf, 0xf9, 0xf8, 0xf1, 0x76, 0xc2, 0x9a, 0x42, 0xfd, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x75, 0xf1, 0x20, 0x8b, 0x83, 0x03, 0x00, 0x00,
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoolValue != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.BoolValue.Size()))
		n1, err := m.BoolValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.BytesValue != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.BytesValue.Size()))
		n2, err := m.BytesValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DoubleValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.DoubleValue.Size()))
		n3, err := m.DoubleValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.FloatValue != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.FloatValue.Size()))
		n4, err := m.FloatValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Int32Value != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.Int32Value.Size()))
		n5, err := m.Int32Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Int64Value != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.Int64Value.Size()))
		n6, err := m.Int64Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.StringValue != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.StringValue.Size()))
		n7, err := m.StringValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Uint32Value != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.Uint32Value.Size()))
		n8, err := m.Uint32Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Uint64Value != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.Uint64Value.Size()))
		n9, err := m.Uint64Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.Timestamp.Size()))
		n10, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.StructValue != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.StructValue.Size()))
		n11, err := m.StructValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.EmptyStructValue != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCodecsTest(dAtA, i, uint64(m.EmptyStructValue.Size()))
		n12, err := m.EmptyStructValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCodecsTest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoolValue != nil {
		l = m.BoolValue.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.BytesValue != nil {
		l = m.BytesValue.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.DoubleValue != nil {
		l = m.DoubleValue.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.FloatValue != nil {
		l = m.FloatValue.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.Int32Value != nil {
		l = m.Int32Value.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.Int64Value != nil {
		l = m.Int64Value.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.StringValue != nil {
		l = m.StringValue.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.Uint32Value != nil {
		l = m.Uint32Value.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.Uint64Value != nil {
		l = m.Uint64Value.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.StructValue != nil {
		l = m.StructValue.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.EmptyStructValue != nil {
		l = m.EmptyStructValue.Size()
		n += 1 + l + sovCodecsTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCodecsTest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodecsTest(x uint64) (n int) {
	return sovCodecsTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodecsTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoolValue == nil {
				m.BoolValue = &types.BoolValue{}
			}
			if err := m.BoolValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BytesValue == nil {
				m.BytesValue = &types.BytesValue{}
			}
			if err := m.BytesValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DoubleValue == nil {
				m.DoubleValue = &types.DoubleValue{}
			}
			if err := m.DoubleValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FloatValue == nil {
				m.FloatValue = &types.FloatValue{}
			}
			if err := m.FloatValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Int32Value == nil {
				m.Int32Value = &types.Int32Value{}
			}
			if err := m.Int32Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Int64Value == nil {
				m.Int64Value = &types.Int64Value{}
			}
			if err := m.Int64Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StringValue == nil {
				m.StringValue = &types.StringValue{}
			}
			if err := m.StringValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uint32Value == nil {
				m.Uint32Value = &types.UInt32Value{}
			}
			if err := m.Uint32Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uint64Value == nil {
				m.Uint64Value = &types.UInt64Value{}
			}
			if err := m.Uint64Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StructValue == nil {
				m.StructValue = &types.Struct{}
			}
			if err := m.StructValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmptyStructValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodecsTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmptyStructValue == nil {
				m.EmptyStructValue = &types.Struct{}
			}
			if err := m.EmptyStructValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodecsTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodecsTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodecsTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodecsTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodecsTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodecsTest
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodecsTest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodecsTest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodecsTest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodecsTest
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodecsTest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodecsTest   = fmt.Errorf("proto: integer overflow")
)
